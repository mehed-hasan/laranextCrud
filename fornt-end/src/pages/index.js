import Form from "@/comps/Form";
import Table from "@/comps/Table";
import { api } from "@/hooks/axiosConfig";
import { swalAlert } from "@/hooks/swal";
import { Inter } from "next/font/google";
import Head from "next/head";
import { useEffect, useState } from "react";
import Swal from "sweetalert2";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [data, setData] = useState([]);
  const [savingProcess, setSavingProcess] = useState(false);
  const [taskName, setTaskName] = useState("");
  const [loading, setLoading] = useState(false);
  const [deleteingTaskName, setDeletingTaskName] = useState("");
  const [deletetingId, setDeletingId] = useState("");
  const [deleteProcessing, setDeleteProcessing] = useState(false);
  const [paginate, setPaginate] = useState([1]);
  const [totalData, setTotalData] = useState(0);
  const [pageNo, setPageNo] = useState(1);
  useEffect(() => {
    fetchData();
  }, [pageNo]);
  const fetchData = async () => {
    setLoading(true);

    await api
      .get("/api/getTask?page=" + pageNo)
      .then((response) => {
        console.log(response);
        if (response.data.lists) {
          if (response.data.lists.data.length > 0) {
            setTotalData(response.data.lists.total);
            setData(response.data.lists.data);
            const paginate = response.data.lists.links;
            setPaginate(paginate);
          }
        } else {
          setData([]);
          setTotalData(0);
          setPaginate([]);
        }
      })
      .catch((error) => {});
    setLoading(false);
  };

  const save = async (e) => {
    e.preventDefault();
    setSavingProcess(true);
    const formData = new FormData();
    formData.append("task", taskName);

    await api
      .post("/api/insertTask", formData)
      .then((response) => {
        swalAlert("success", response.data.message);
        setSavingProcess(false);
      })
      .catch((error) => {
        swalAlert("error", error.response.data.errors.task[0]);
        setSavingProcess(false);
      });

    fetchData();
  };

  const handleDelete = (id) => {
    setDeletingId(id);
    const gettingPageNo = document.querySelector(".page-link.active").innerHTML;

    console.log(gettingPageNo);
    const getData = api.get("api/taskId/" + id).then((response) => {
      const data = response.data.data;
    });

    const swalWithBootstrapButtons = Swal.mixin({
      customClass: {
        confirmButton: "btn btn-success ms-2 btn-sm",
        cancelButton: "btn btn-danger btn-sm",
      },
      buttonsStyling: false,
    });

    swalWithBootstrapButtons
      .fire({
        position: "top-end",
        title: "Are you sure you want to delete " + deleteingTaskName + " ?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, delete it!",
        cancelButtonText: "No, cancel!",
        reverseButtons: true,
      })
      .then((result) => {
        if (result.isConfirmed) {
          setDeleteProcessing(true);
          const deleted = api.get("api/deleteTask/" + id).then((response) => {
            Swal.fire({
              position: "top-end",
              icon: "success",
              title: response.data.message,
              showConfirmButton: false,
              timer: 1500,
            }).then(() => {
              setDeleteProcessing(false);
              if (data.length == 1 && pageNo == 1) {
                fetchData();
              } else {
                setPageNo(pageNo - 1);
              }
            });
          });
        } else if (
          /* Read more about handling dismissals below */
          result.dismiss === Swal.DismissReason.cancel
        ) {
        }
      });
  };

  return (
    <>
      <Head>
        <title>LaraNext Todo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        <Form
          savingProcess={savingProcess}
          save={save}
          setTaskName={setTaskName}
        />

        <Table
          setPageNo={setPageNo}
          paginate={paginate}
          totalData={totalData}
          deletetingId={deletetingId}
          deleteProcessing={deleteProcessing}
          handleDelete={handleDelete}
          data={data}
          loading={loading}
        />
      </div>
    </>
  );
}
